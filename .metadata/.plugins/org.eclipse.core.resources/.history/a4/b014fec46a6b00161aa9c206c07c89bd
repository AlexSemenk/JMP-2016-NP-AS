package com.epam.jmp.multithreading;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Run {

	private static final Car[] cars = new Car[] {
		new Car("Mclaren", 5),
		new Car("Ferrari", 10),
		new Car("Porsche", 15),
		new Car("Lamborghini", 20),
	};
	
	public static void main(String[] args) {
		Lock cup = new ReentrantLock();
		CountDownLatch latch = new CountDownLatch(cars.length);
		Thread[] races = new Thread[cars.length];
		for(int i=0; i<cars.length; i++) {
			Car car = cars[i];
			races[i] = new Thread(cars[i]) {
				@Override
				public void run() {
					long start = System.currentTimeMillis();
					car.run();
					long end = System.currentTimeMillis();
					long time = start - end;
					latch.countDown();
					printFinish(car, time);
					if (cup.tryLock()) {
						try {
							latch.await();
							printWinner(car);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			};
		}
	}

	private static void printWinner(Car winnerCar) {
		System.out.println("Winner is " + winnerCar.getName() + "!");
	}
	
	private static void printFinish(Car winnerCar, long millis) {
		double seconds = millis / 1000.0;
		System.out.println(String.format("Car %s finished at %f ", winnerCar.getName(), seconds));
	}
	
}
