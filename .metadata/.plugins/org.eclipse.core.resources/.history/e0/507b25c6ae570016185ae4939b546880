package com.epam.jmp.classloader;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

/**
 * @author Alexander Semenkevich
 * 
 * Task: 
 * Write your own StatelessClassLoader 
 * which will load only stateless classes (without fields) 
 * from .jar file specified as input parameter ().
 * Don’t forget provide test code.
 */
public class StatelessClassLoader extends ClassLoader {

	private final String jarPath;
	
	public StatelessClassLoader(String jarPath) {
		this.jarPath = jarPath;
	}
	
	protected Class<?> findClass(String className) throws ClassNotFoundException {
		byte[] bytes;
		try {
			bytes = findBiteCode(className);
		} catch (IOException e) {
			throw new ClassNotFoundException(className, e);
		}
		return defineClass(className, bytes);
	}
	
	protected byte[] findBiteCode(String className) throws IOException  {
		JarFile jar = new JarFile(jarPath);
		String fileName = className.replace('.', '/').concat(".class");
		JarEntry entry = jar.getJarEntry(fileName);
		InputStream input = jar.getInputStream(entry);
		DataInputStream data = new DataInputStream(input);
		byte[] bytes = new byte[(int)entry.getSize()];
		data.readFully(bytes);
		jar.close();
		return bytes;
	}
	
	public Class<?> loadClass(String name) throws ClassNotFoundException {
		Class<?> clazz = loadClass(name, false);
		if (ClassUtils.isStateless(clazz)) {
			return clazz;
		} else {
			throw new ClassNotFoundException("class " + name + " isn't stateless");
		}
	}
	
	protected final Class<?> defineClass(String name, byte[] b) {
		return defineClass(name, b, 0, b.length);
	}
	
}
