package com.epam.jmp.classloader;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

/**
 * @author Alexander Semenkevich
 * 
 * Task: 
 * Write your own StatelessClassLoader 
 * which will load only stateless classes (without fields) 
 * from .jar file specified as input parameter ().
 * Don’t forget provide test code.
 */
public class StatelessClassLoader extends ClassLoader {

	private String jarPath;
	
	public StatelessClassLoader(String jarPath) {
		this.jarPath = jarPath;
	}
	
	protected Class<?> findClass(String name) throws ClassNotFoundException {
		Class<?> clazz = loadClassFormJar(name);
		if (isStateless(clazz)) {
			return clazz;
		} else {
			throw new ClassNotFoundException(name);
		}
	}
	
	private Class<?> loadClassFormJar(String className) throws ClassNotFoundException {
		try {
			JarFile jar = new JarFile(jarPath);
			String fileName = className.replace('.', '/').concat(".class");
			JarEntry entry = jar.getJarEntry(fileName);
			InputStream input = jar.getInputStream(entry);
			DataInputStream data = new DataInputStream(input);
			byte[] bytes = new byte[(int)entry.getSize()];
			data.readFully(bytes);
			jar.close();
			return defineClass(className, bytes);
		} catch (IOException e) {
			throw new ClassNotFoundException(className, e);
		}
	}
	
	protected final Class<?> defineClass(String name, byte[] b) {
		return defineClass(name, b, 0, b.length);
	}
	
	static boolean isStateless(Class<?> clazz) {
		return clazz.getDeclaredFields().length == 0;
	}
	
}
